var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
import { Observable } from 'rxjs';
var MediaCaptureOriginal = /** @class */ (function (_super) {
    __extends(MediaCaptureOriginal, _super);
    function MediaCaptureOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MediaCaptureOriginal.prototype.captureAudio = function (options) { return cordova(this, "captureAudio", { "callbackOrder": "reverse" }, arguments); };
    MediaCaptureOriginal.prototype.captureImage = function (options) { return cordova(this, "captureImage", { "callbackOrder": "reverse" }, arguments); };
    MediaCaptureOriginal.prototype.captureVideo = function (options) { return cordova(this, "captureVideo", { "callbackOrder": "reverse" }, arguments); };
    MediaCaptureOriginal.prototype.onPendingCaptureResult = function () { return cordova(this, "onPendingCaptureResult", { "eventObservable": true, "event": "pendingcaptureresult" }, arguments); };
    MediaCaptureOriginal.prototype.onPendingCaptureError = function () { return cordova(this, "onPendingCaptureError", { "eventObservable": true, "event": "pendingcaptureerror" }, arguments); };
    Object.defineProperty(MediaCaptureOriginal.prototype, "supportedImageModes", {
        get: function () { return cordovaPropertyGet(this, "supportedImageModes"); },
        set: function (value) { cordovaPropertySet(this, "supportedImageModes", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaCaptureOriginal.prototype, "supportedAudioModes", {
        get: function () { return cordovaPropertyGet(this, "supportedAudioModes"); },
        set: function (value) { cordovaPropertySet(this, "supportedAudioModes", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaCaptureOriginal.prototype, "supportedVideoModes", {
        get: function () { return cordovaPropertyGet(this, "supportedVideoModes"); },
        set: function (value) { cordovaPropertySet(this, "supportedVideoModes", value); },
        enumerable: true,
        configurable: true
    });
    MediaCaptureOriginal.pluginName = "MediaCapture";
    MediaCaptureOriginal.plugin = "cordova-plugin-media-capture";
    MediaCaptureOriginal.pluginRef = "navigator.device.capture";
    MediaCaptureOriginal.repo = "https://github.com/apache/cordova-plugin-media-capture";
    MediaCaptureOriginal.platforms = ["Android", "Browser", "iOS", "Windows"];
    return MediaCaptureOriginal;
}(IonicNativePlugin));
var MediaCapture = new MediaCaptureOriginal();
export { MediaCapture };
//# sourceMappingURL=data:application/json;base64,